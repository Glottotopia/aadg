<?xml version="1.0" encoding="UTF-8" ?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->



<schema name="example" version="1.5">
	<fields>

		<field name="id" type="string" indexed="true" stored="true"
			required="true" multiValued="false" />
		<field name="uuid" type="string" indexed="true" stored="true"
			multiValued="false" />  <!-- deprecated. normal id remains primary key -->
		<field name="athaid" type="string" indexed="true" stored="true"
			required="true" multiValued="false" />

		<!-- points to the root document of a block of nested documents -->
		<field name="_root_" type="string" indexed="true" stored="false" />


		<field name="name" type="text_general" indexed="true" stored="true" />
		<field name="vernacularsentence" type="text_general" indexed="true"
			stored="true" />
		<field name="translatedsentence" type="text_general" indexed="true"
			stored="true" />
		<field name="imtsentence" type="text_general" indexed="true"
			stored="true" />
		<field name="flag" type="boolean" indexed="true" stored="true" />

		<!-- versioning -->
		<field name="latest" type="boolean" indexed="true" stored="true" />
		<field name="version" type="int" indexed="true" stored="true" />


		<field name="iso639-3" type="string" indexed="true" stored="true" />
		<field name="language" type="string" indexed="true" stored="true" />
		<field name="vernacularword" type="string" indexed="true"
			stored="true" multiValued="true" termVectors="true" />
		<field name="translatedword" type="string" indexed="true"
			stored="true" multiValued="true" termVectors="true" />
		<field name="gloss" type="string" indexed="true" stored="true"
			multiValued="true" termVectors="true" />
		<field name="pos" type="string" indexed="true" stored="true"
			multiValued="true" termVectors="true" />
		<field name="lexicalgloss" type="string" indexed="true" stored="true"
			multiValued="true" termVectors="true" />
		<field name="grammaticalgloss" type="string" indexed="true"
			stored="true" multiValued="true" termVectors="true" />
		<!-- from metadata spreadsheet -->
		<field name="aagdID" type="string" indexed="true" stored="true" />
		<field name="lg" type="string" indexed="true" stored="true" /> <!--must be unified with lg -->
		<field name="dialect" type="string" indexed="true" stored="true" />
		<field name="speaker" type="string" indexed="true" stored="true" />
		<field name="source" type="string" indexed="true" stored="true" />
		<field name="recordingname" type="string" indexed="true" stored="true" />
		<field name="recordingdate" type="tdate" indexed="true" stored="true" />
		<field name="recordinglinguist" type="string" indexed="true"
			stored="true" />
		<field name="anlalink" type="string" indexed="true" stored="true" />
		<field name="editedbyspeaker" type="string" indexed="true"
			stored="true" />
		<field name="editedbylinguist" type="string" indexed="true"
			stored="true" />
		<field name="texttype" type="string" indexed="true" stored="true" />
		<field name="rejectedbyspeaker" type="string" indexed="true"
			stored="true" />




		<!-- start ontology import here -->

		<field name="sentence_type" type="string" indexed="true" stored="true"
			multiValued="true" />
		<field name="predicate_type" type="string" indexed="true"
			stored="true" multiValued="true" />
		<field name="phrase_type" type="string" indexed="true" stored="true"
			multiValued="true" />
		<field name="incorporation" type="string" indexed="true" stored="true"
			multiValued="true" />
		<field name="polarity" type="string" indexed="true" stored="true"
			multiValued="true" />
		<field name="coordination" type="string" indexed="true" stored="true"
			multiValued="true" />
		<field name="adverbial_clauses" type="string" indexed="true"
			stored="true" multiValued="true" />
		<field name="situation_types" type="string" indexed="true"
			stored="true" multiValued="true" />
		<field name="aspect" type="string" indexed="true" stored="true"
			multiValued="true" />
		<field name="time" type="string" indexed="true" stored="true"
			multiValued="true" />
		<field name="event_modality" type="string" indexed="true"
			stored="true" multiValued="true" />
		<field name="proposition_modality" type="string" indexed="true"
			stored="true" multiValued="true" />
		<field name="participant_roles" type="string" indexed="true"
			stored="true" multiValued="true" />
		<field name="quantification_of_individuals" type="string"
			indexed="true" stored="true" multiValued="true" />
		<field name="quantification_of_other" type="string" indexed="true"
			stored="true" multiValued="true" />
		<field name="comparison" type="string" indexed="true" stored="true"
			multiValued="true" />
		<field name="possession" type="string" indexed="true" stored="true"
			multiValued="true" />
		<field name="information_structure" type="string" indexed="true"
			stored="true" multiValued="true" />
		<field name="speech_acts" type="string" indexed="true" stored="true"
			multiValued="true" />
		<field name="politeness" type="string" indexed="true" stored="true"
			multiValued="true" />
		<!-- finish ontology import here -->
		<field name="lingex" type="string" stored="true" />


		<field name="location" type="location" indexed="true" stored="true" />
		<field name="words" type="int" indexed="true" stored="true" />
		<field name="chars" type="int" indexed="true" stored="true" />


		<field name="title" type="text_general" indexed="true" stored="true"
			multiValued="true" />
		<field name="subject" type="text_general" indexed="true" stored="true" />
		<field name="description" type="text_general" indexed="true"
			stored="true" />
		<field name="comments" type="text_general" indexed="true"
			stored="true" />
		<field name="author" type="text_general" indexed="true" stored="true" />
		<field name="keywords" type="text_general" indexed="true"
			stored="true" />
		<field name="category" type="text_general" indexed="true"
			stored="true" />
		<field name="resourcename" type="text_general" indexed="true"
			stored="true" />
		<field name="url" type="text_general" indexed="true" stored="true" />
		<field name="content_type" type="string" indexed="true" stored="true"
			multiValued="true" />
		<field name="last_modified" type="date" indexed="true" stored="true" />
		<field name="links" type="string" indexed="true" stored="true"
			multiValued="true" />

		<!-- Main body of document extracted by SolrCell. NOTE: This field is not 
			indexed by default, since it is also copied to "text" using copyField below. 
			This is to save space. Use this field for returning and highlighting document 
			content. Use the "text" field to search the content. -->
		<field name="content" type="text_general" indexed="false"
			stored="true" multiValued="true" />


		<!-- catchall field, containing all other searchable text fields (implemented 
			via copyField further on in this schema -->
		<field name="text" type="text_general" indexed="true" stored="false"
			multiValued="true" />

		<!-- catchall text field that indexes tokens both normally and in reverse 
			for efficient leading wildcard queries. -->
		<field name="text_rev" type="text_general_rev" indexed="true"
			stored="false" multiValued="true" />

		<!-- non-tokenized version of manufacturer to make it easier to sort or 
			group results by manufacturer. copied from "manu" via copyField -->
		<!-- <field name="manu_exact" type="string" indexed="true" stored="false"/> 
			<field name="manu_exactus" type="string" indexed="true" stored="false"/> -->

		<field name="payloads" type="payloads" indexed="true" stored="true" />

		<field name="_version_" type="long" indexed="true" stored="true" />

		<dynamicField name="*_i" type="int" indexed="true"
			stored="true" />
		<dynamicField name="*_is" type="int" indexed="true"
			stored="true" multiValued="true" />
		<dynamicField name="*_s" type="string" indexed="true"
			stored="true" />
		<dynamicField name="*_ss" type="string" indexed="true"
			stored="true" multiValued="true" />
		<dynamicField name="*_l" type="long" indexed="true"
			stored="true" />
		<dynamicField name="*_ls" type="long" indexed="true"
			stored="true" multiValued="true" />
		<dynamicField name="*_t" type="text_general" indexed="true"
			stored="true" />
		<dynamicField name="*_txt" type="text_general" indexed="true"
			stored="true" multiValued="true" />
		<dynamicField name="*_b" type="boolean" indexed="true"
			stored="true" />
		<dynamicField name="*_bs" type="boolean" indexed="true"
			stored="true" multiValued="true" />
		<dynamicField name="*_f" type="float" indexed="true"
			stored="true" />
		<dynamicField name="*_fs" type="float" indexed="true"
			stored="true" multiValued="true" />
		<dynamicField name="*_d" type="double" indexed="true"
			stored="true" />
		<dynamicField name="*_ds" type="double" indexed="true"
			stored="true" multiValued="true" />

		<!-- Type used to index the lat and lon components for the "location" FieldType -->
		<dynamicField name="*_coordinate" type="tdouble" indexed="true"
			stored="false" />

		<dynamicField name="*_dt" type="date" indexed="true"
			stored="true" />
		<dynamicField name="*_dts" type="date" indexed="true"
			stored="true" multiValued="true" />
		<dynamicField name="*_p" type="location" indexed="true"
			stored="true" />

		<!-- some trie-coded dynamic fields for faster range queries -->
		<dynamicField name="*_ti" type="tint" indexed="true"
			stored="true" />
		<dynamicField name="*_tl" type="tlong" indexed="true"
			stored="true" />
		<dynamicField name="*_tf" type="tfloat" indexed="true"
			stored="true" />
		<dynamicField name="*_td" type="tdouble" indexed="true"
			stored="true" />
		<dynamicField name="*_tdt" type="tdate" indexed="true"
			stored="true" />


		<dynamicField name="ignored_*" type="ignored"
			multiValued="true" />
		<dynamicField name="attr_*" type="text_general" indexed="true"
			stored="true" multiValued="true" />

		<dynamicField name="random_*" type="random" />

		<!-- uncomment the following to ignore any fields that don't already match 
			an existing field name or dynamic field, rather than reporting them as an 
			error. alternately, change the type="ignored" to some other type e.g. "text" 
			if you want unknown fields indexed and/or stored by default -->
		<!--dynamicField name="*" type="ignored" multiValued="true" / -->

	</fields>


	<!-- Field to use to determine and enforce document uniqueness. Unless this 
		field is marked with required="false", it will be a required field -->
	<uniqueKey>id</uniqueKey>


	<!-- copyField commands copy one field to another at the time a document 
		is added to the index. It's used either to index the same field differently, 
		or to add multiple fields to the same field for easier/faster searching. -->

	<copyField source="author" dest="text" />
	<copyField source="vernacularword" dest="text" />
	<copyField source="translatedword" dest="text" />
	<copyField source="vernacularsentence" dest="text" />
	<copyField source="translatedsentence" dest="text" />
	<copyField source="gloss" dest="text" />
	<copyField source="iso639-3" dest="text" />
	<copyField source="id" dest="text" />
	<copyField source="lingex" dest="text" />

	<!-- Create a string version of author for faceting -->
	<copyField source="author" dest="author_s" />


	<types>
		<!-- field type definitions. The "name" attribute is just a label to be 
			used by field definitions. The "class" attribute and any other attributes 
			determine the real behavior of the fieldType. Class names starting with "solr" 
			refer to java classes in a standard package such as org.apache.solr.analysis -->

		<!-- The StrField type is not analyzed, but indexed/stored verbatim. It 
			supports doc values but in that case the field needs to be single-valued 
			and either required or have a default value. -->
		<fieldType name="string" class="solr.StrField"
			sortMissingLast="true" />

		<!-- boolean type: "true" or "false" -->
		<fieldType name="boolean" class="solr.BoolField"
			sortMissingLast="true" />


		<!-- Default numeric field types. For faster range queries, consider the 
			tint/tfloat/tlong/tdouble types. These fields support doc values, but they 
			require the field to be single-valued and either be required or have a default 
			value. -->
		<fieldType name="int" class="solr.TrieIntField"
			precisionStep="0" positionIncrementGap="0" />
		<fieldType name="float" class="solr.TrieFloatField"
			precisionStep="0" positionIncrementGap="0" />
		<fieldType name="long" class="solr.TrieLongField"
			precisionStep="0" positionIncrementGap="0" />
		<fieldType name="double" class="solr.TrieDoubleField"
			precisionStep="0" positionIncrementGap="0" />

		<fieldType name="tint" class="solr.TrieIntField"
			precisionStep="8" positionIncrementGap="0" />
		<fieldType name="tfloat" class="solr.TrieFloatField"
			precisionStep="8" positionIncrementGap="0" />
		<fieldType name="tlong" class="solr.TrieLongField"
			precisionStep="8" positionIncrementGap="0" />
		<fieldType name="tdouble" class="solr.TrieDoubleField"
			precisionStep="8" positionIncrementGap="0" />

		<fieldType name="date" class="solr.TrieDateField"
			precisionStep="0" positionIncrementGap="0" />

		<!-- A Trie based date field for faster date range queries and date faceting. -->
		<fieldType name="tdate" class="solr.TrieDateField"
			precisionStep="6" positionIncrementGap="0" />


		<!--Binary data type. The data should be sent/retrieved in as Base64 encoded 
			Strings -->
		<fieldtype name="binary" class="solr.BinaryField" />

		<fieldType name="random" class="solr.RandomSortField"
			indexed="true" />



		<!-- A text field that only splits on whitespace for exact matching of 
			words -->
		<fieldType name="text_ws" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory" />
			</analyzer>
		</fieldType>

		<!-- A general text field that has reasonable, generic cross-language defaults: 
			it tokenizes with StandardTokenizer, removes stop words from case-insensitive 
			"stopwords.txt" (empty by default), and down cases. At query time only, it 
			also applies synonyms. -->
		<fieldType name="text_general" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="stopwords.txt" />
				<!-- in this example, we will only use synonyms at query time <filter 
					class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" 
					expand="false"/> -->
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="stopwords.txt" />
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
					ignoreCase="true" expand="true" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>



		<!-- Just like text_general except it reverses the characters of each token, 
			to enable more efficient leading wildcard queries. -->
		<fieldType name="text_general_rev" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="stopwords.txt" />
				<filter class="solr.LowerCaseFilterFactory" />
				<filter class="solr.ReversedWildcardFilterFactory"
					withOriginal="true" maxPosAsterisk="3" maxPosQuestion="2"
					maxFractionAsterisk="0.33" />
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
					ignoreCase="true" expand="true" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="stopwords.txt" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>

		<!-- charFilter + WhitespaceTokenizer -->
		<!-- <fieldType name="text_char_norm" class="solr.TextField" positionIncrementGap="100" 
			> <analyzer> <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/> 
			<tokenizer class="solr.WhitespaceTokenizerFactory"/> </analyzer> </fieldType> -->

		<!-- This is an example of using the KeywordTokenizer along With various 
			TokenFilterFactories to produce a sortable field that does not include some 
			properties of the source text -->
		<fieldType name="alphaOnlySort" class="solr.TextField"
			sortMissingLast="true" omitNorms="true">
			<analyzer>
				<!-- KeywordTokenizer does no actual tokenizing, so the entire input 
					string is preserved as a single token -->
				<tokenizer class="solr.KeywordTokenizerFactory" />
				<!-- The LowerCase TokenFilter does what you expect, which can be when 
					you want your sorting to be case insensitive -->
				<filter class="solr.LowerCaseFilterFactory" />
				<!-- The TrimFilter removes any leading or trailing whitespace -->
				<filter class="solr.TrimFilterFactory" />
				<!-- The PatternReplaceFilter gives you the flexibility to use Java Regular 
					expression to replace any sequence of characters matching a pattern with 
					an arbitrary replacement string, which may include back references to portions 
					of the original string matched by the pattern. See the Java Regular Expression 
					documentation for more information on pattern and replacement string syntax. 
					http://java.sun.com/j2se/1.6.0/docs/api/java/util/regex/package-summary.html -->
				<filter class="solr.PatternReplaceFilterFactory" pattern="([^a-z])"
					replacement="" replace="all" />
			</analyzer>
		</fieldType>

		<fieldtype name="phonetic" stored="false" indexed="true"
			class="solr.TextField">
			<analyzer>
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.DoubleMetaphoneFilterFactory" inject="false" />
			</analyzer>
		</fieldtype>

		<fieldtype name="payloads" stored="false" indexed="true"
			class="solr.TextField">
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory" />
				<!-- The DelimitedPayloadTokenFilter can put payloads on tokens... for 
					example, a token of "foo|1.4" would be indexed as "foo" with a payload of 
					1.4f Attributes of the DelimitedPayloadTokenFilterFactory : "delimiter" - 
					a one character delimiter. Default is | (pipe) "encoder" - how to encode 
					the following value into a playload float -> org.apache.lucene.analysis.payloads.FloatEncoder, 
					integer -> o.a.l.a.p.IntegerEncoder identity -> o.a.l.a.p.IdentityEncoder 
					Fully Qualified class name implementing PayloadEncoder, Encoder must have 
					a no arg constructor. -->
				<filter class="solr.DelimitedPayloadTokenFilterFactory"
					encoder="float" />
			</analyzer>
		</fieldtype>

		<!-- Example of using PathHierarchyTokenizerFactory at index time, so queries 
			for paths match documents at that path, or in descendent paths -->
		<fieldType name="descendent_path" class="solr.TextField">
			<analyzer type="index">
				<tokenizer class="solr.PathHierarchyTokenizerFactory"
					delimiter="/" />
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.KeywordTokenizerFactory" />
			</analyzer>
		</fieldType>
		<!-- Example of using PathHierarchyTokenizerFactory at query time, so queries 
			for paths match documents at that path, or in ancestor paths -->
		<fieldType name="ancestor_path" class="solr.TextField">
			<analyzer type="index">
				<tokenizer class="solr.KeywordTokenizerFactory" />
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.PathHierarchyTokenizerFactory"
					delimiter="/" />
			</analyzer>
		</fieldType>

		<!-- since fields of this type are by default not stored or indexed, any 
			data added to them will be ignored outright. -->
		<fieldtype name="ignored" stored="false" indexed="false"
			multiValued="true" class="solr.StrField" />

		<!-- This point type indexes the coordinates as separate fields (subFields) 
			If subFieldType is defined, it references a type, and a dynamic field definition 
			is created matching *___<typename>. Alternately, if subFieldSuffix is defined, 
			that is used to create the subFields. Example: if subFieldType="double", 
			then the coordinates would be indexed in fields myloc_0___double,myloc_1___double. 
			Example: if subFieldSuffix="_d" then the coordinates would be indexed in 
			fields myloc_0_d,myloc_1_d The subFields are an implementation detail of 
			the fieldType, and end users normally should not need to know about them. -->
		<fieldType name="point" class="solr.PointType" dimension="2"
			subFieldSuffix="_d" />

		<!-- A specialized field for geospatial search. If indexed, this fieldType 
			must not be multivalued. -->
		<fieldType name="location" class="solr.LatLonType"
			subFieldSuffix="_coordinate" />

		<!-- An alternative geospatial field type new to Solr 4. It supports multiValued 
			and polygon shapes. For more information about this and other Spatial fields 
			new to Solr 4, see: http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4 -->
		<fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType"
			geo="true" distErrPct="0.025" maxDistErr="0.000009" units="degrees" />



	</types>


</schema>

